Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1] /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(32,1)
  -> INLINE: (43,5) multiply(my_vector *, double *)
    -> INLINE: (22,10) my_vector_len(my_vector *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(21,5) inlined into /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(43,5)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(36,5)
   remark #15527: loop was not vectorized: function call to rand(void) cannot be vectorized   [ /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(38,36) ]
LOOP END

LOOP BEGIN at /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(21,5) inlined into /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(43,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(21,5) inlined into /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(43,5)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(23,9) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(21,5) inlined into /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(43,5)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

/home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(32,1):remark #34051: REGISTER ALLOCATION : [main] /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c:32

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     215
            Global    :      48
            Local     :     167
        Regenerable   :      96
        Spilled       :       3
        
    Routine stack
        Variables     :     100 bytes*
            Reads     :       9 [1.00e+00 ~ 0.4%]
            Writes    :      12 [1.34e+01 ~ 5.2%]
        Spills        :      64 bytes*
            Reads     :      18 [8.00e+00 ~ 3.1%]
            Writes    :      18 [8.00e+00 ~ 3.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: my_vector_len(my_vector *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (my_vector_len(my_vector *)) [2] /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(13,37)


    Report from: Code generation optimizations [cg]

/home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(13,37):remark #34051: REGISTER ALLOCATION : [my_vector_len] /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c:13

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       0
            Local     :      10
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: multiply(my_vector *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (multiply(my_vector *, double *)) [3] /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(18,1)
  -> INLINE: (22,10) my_vector_len(my_vector *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(21,5)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(21,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(21,5)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(23,9) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(21,5)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

/home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c(18,1):remark #34051: REGISTER ALLOCATION : [multiply] /home/moskalenkoviktor/Документы/Study/6_1/optimization/main.c:18

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     174
            Global    :      33
            Local     :     141
        Regenerable   :      72
        Spilled       :       0
        
    Routine stack
        Variables     :      96 bytes*
            Reads     :       7 [1.00e+00 ~ 0.5%]
            Writes    :      10 [1.34e+01 ~ 7.2%]
        Spills        :      48 bytes*
            Reads     :      18 [6.00e+00 ~ 3.2%]
            Writes    :      18 [1.20e+01 ~ 6.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
